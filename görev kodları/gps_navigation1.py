# scripts/gps_navigation_with_obstacle_avoidance.py
"""
GPS Navigasyon + Engel Atlama Sistemi
=====================================
‚Ä¢ Hedef GPS koordinatƒ±na gitme
‚Ä¢ Yolda engel algƒ±lama (sarƒ± renk = engel)
‚Ä¢ Engel atlama manevrasƒ±
‚Ä¢ Hedefe devam etme

Renk ‚Üí Davranƒ±≈ü Haritasƒ±:
‚Ä¢ Ye≈üil/Mavi ‚Üí D√ºz git (g√ºvenli yol)
‚Ä¢ Sarƒ± ‚Üí Engel! Ka√ßƒ±nma manevrasƒ±
‚Ä¢ Kƒ±rmƒ±zƒ± ‚Üí G√ºvenli yol

Motor Kontrol:
‚Ä¢ Sol motor ‚Üí PWM_STOP - steer_offset
‚Ä¢            cv2.putText(frame, f"Mod: {current_mode}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, status_color, 2)
            cv2.putText(frame, f"GPS: {status_data.get('gps_status', 'Bilinmiyor')}", (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255,255,0), 2)
            cv2.putText(frame, f"Hedef: {status_data['distance_to_target']:.1f}m", (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0,255,0), 2)
            cv2.putText(frame, f"Engel: {yellow_ratio*100:.1f}% ({status_data['obstacle_position']})", (10, 120), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0,255,255), 2)
            cv2.putText(frame, f"THR:{thr} STR:{steer}", (10, 150), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255,255,0), 2) motor ‚Üí PWM_STOP + steer_offset
"""

import time
import math
import cv2
import numpy as np
from dronekit import connect, VehicleMode, LocationGlobalRelative
import threading
from queue import Queue
from geopy.distance import geodesic

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Kullanƒ±cƒ± ayarlarƒ± ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
CONNECTION = 'COM18'
BAUD       = 57600
CAM_INDEX  = 0
SHOW_WIN   = True
CONNECTION_TIMEOUT = 60

# PWM deƒüerleri
PWM_STOP   = 1500
PWM_SLOW   = 1550       # yava≈ü ileri
PWM_NORMAL = 1700       # normal ileri (hƒ±zlandƒ±rƒ±ldƒ±)
PWM_FAST   = 1800       # hƒ±zlƒ± ileri (hƒ±zlandƒ±rƒ±ldƒ±)

# Navigasyon ayarlarƒ±
TARGET_LAT = 40.7710894  # Hedef koordinat - Mission Planner'dan alƒ±nan
TARGET_LON = 29.4372419  # Hedef koordinat - Mission Planner'dan alƒ±nan
ARRIVAL_RADIUS = 2.0     # metre - hedefe bu kadar yakla≈üƒ±nca "vardƒ±" say
GPS_UPDATE_RATE = 1.0   # saniye - GPS kontrol√º

# Engel algƒ±lama ayarlarƒ±
OBSTACLE_THRESHOLD = 0.15   # ROI'nin %15'i sarƒ± ise engel var
SAFE_DISTANCE = 1.0         # metre - engelden bu kadar uzak dur
AVOIDANCE_DURATION = 3.0    # saniye - ka√ßƒ±nma manevrasƒ± s√ºresi

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Global deƒüi≈ükenler ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
current_mode = "MANUAL"     # MANUAL, AUTO_GPS, OBSTACLE_AVOID
obstacle_detected = False
avoidance_start_time = 0
last_gps_check = 0

# Thread-safe haberle≈üme
command_queue = Queue()
status_data = {
    'distance_to_target': 999,
    'bearing_to_target': 0,
    'current_lat': 0,
    'current_lon': 0,
    'obstacle_ratio': 0,
    'obstacle_position': 'none',
    'gps_status': 'Ba≈ülatƒ±lƒ±yor...'
}

def calculate_bearing(lat1, lon1, lat2, lon2):
    """ƒ∞ki GPS koordinatƒ± arasƒ±ndaki bearing (derece) hesapla"""
    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])
    
    dlon = lon2 - lon1
    y = math.sin(dlon) * math.cos(lat2)
    x = math.cos(lat1) * math.sin(lat2) - math.sin(lat1) * math.cos(lat2) * math.cos(dlon)
    
    bearing = math.atan2(y, x)
    bearing = math.degrees(bearing)
    bearing = (bearing + 360) % 360
    return bearing

def calculate_distance(lat1, lon1, lat2, lon2):
    """ƒ∞ki GPS koordinatƒ± arasƒ±ndaki mesafe (metre)"""
    return geodesic((lat1, lon1), (lat2, lon2)).meters

def bearing_to_motor_command(target_bearing, current_bearing):
    """Bearing farkƒ±na g√∂re motor komutlarƒ± olu≈ütur"""
    bearing_diff = target_bearing - current_bearing
    
    # -180 ile +180 arasƒ± normalize et
    if bearing_diff > 180:
        bearing_diff -= 360
    elif bearing_diff < -180:
        bearing_diff += 360
    
    print(f"üß≠ Target: {target_bearing:.0f}¬∞, Current: {current_bearing:.0f}¬∞, Diff: {bearing_diff:.0f}¬∞")
    
    # Motor komutlarƒ±na √ßevir
    base_throttle = PWM_FAST
    
    if abs(bearing_diff) < 15:  # d√ºz git
        thr, steer = base_throttle, PWM_STOP
        print(f"‚û°Ô∏è D√úZ Gƒ∞T: THR={thr}, STR={steer}")
    elif bearing_diff > 0:  # saƒüa d√∂n (target bearing daha b√ºy√ºk)
        # Saƒüa d√∂nmek i√ßin: sol motor hƒ±zlƒ±, saƒü motor yava≈ü
        steer_offset = min(150, abs(bearing_diff) * 2)  # maksimum 150 PWM fark
        thr = base_throttle
        steer = PWM_STOP + steer_offset  # D√úZELTƒ∞LDƒ∞: saƒüa steer
        print(f"‚ÜóÔ∏è SAƒûA D√ñN: THR={thr}, STR={steer} (offset: +{steer_offset})")
    else:  # sola d√∂n (target bearing daha k√º√ß√ºk)
        # Sola d√∂nmek i√ßin: saƒü motor hƒ±zlƒ±, sol motor yava≈ü  
        steer_offset = min(150, abs(bearing_diff) * 2)  # maksimum 150 PWM fark
        thr = base_throttle
        steer = PWM_STOP - steer_offset  # D√úZELTƒ∞LDƒ∞: sola steer
        print(f"‚ÜñÔ∏è SOLA D√ñN: THR={thr}, STR={steer} (offset: -{steer_offset})")
    
    return thr, steer

def gps_navigation_thread(vehicle):
    """GPS navigasyon thread'i"""
    global current_mode, last_gps_check, status_data
    
    print("üõ∞Ô∏è GPS thread ba≈ülatƒ±ldƒ±")
    
    while True:
        try:
            if time.time() - last_gps_check >= GPS_UPDATE_RATE:
                last_gps_check = time.time()
                
                # GPS durumu kontrol√º
                gps_fix_type = getattr(vehicle.gps_0, 'fix_type', 0) if hasattr(vehicle, 'gps_0') else 0
                satellites_visible = getattr(vehicle.gps_0, 'satellites_visible', 0) if hasattr(vehicle, 'gps_0') else 0
                
                print(f"üõ∞Ô∏è GPS Fix Type: {gps_fix_type}, Uydu: {satellites_visible}")
                
                # GPS verisi kontrol et
                if not vehicle.location.global_frame:
                    print("‚ö†Ô∏è GPS location verisi yok")
                    status_data['gps_status'] = "GPS verisi yok"
                    time.sleep(2)
                    continue
                    
                current_lat = vehicle.location.global_frame.lat
                current_lon = vehicle.location.global_frame.lon
                
                # Ge√ßerli koordinat kontrol√º
                if current_lat == 0 and current_lon == 0:
                    print(f"‚ö†Ô∏è Ge√ßersiz GPS (0,0) - Fix: {gps_fix_type}, Uydu: {satellites_visible}")
                    status_data['gps_status'] = f"Fix:{gps_fix_type} Uydu:{satellites_visible}"
                    time.sleep(2)
                    continue
                
                # GPS fix kalitesi kontrol√º
                if gps_fix_type < 3:  # 3D fix gerekli
                    print(f"‚ö†Ô∏è GPS fix yetersiz (Fix Type: {gps_fix_type}) - 3D fix gerekli")
                    status_data['gps_status'] = f"Fix yetersiz:{gps_fix_type}"
                    time.sleep(2)
                    continue
                
                # Uydu sayƒ±sƒ± kontrol√º
                if satellites_visible < 6:
                    print(f"‚ö†Ô∏è Uydu sayƒ±sƒ± yetersiz ({satellites_visible}) - En az 6 gerekli")
                    status_data['gps_status'] = f"Uydu yetersiz:{satellites_visible}"
                    time.sleep(2)
                    continue
                
                print(f"‚úÖ GPS ƒ∞Yƒ∞: Lat:{current_lat:.6f}, Lon:{current_lon:.6f}, Fix:{gps_fix_type}, Uydu:{satellites_visible}")
                
                # Hedefe olan mesafe ve bearing
                distance = calculate_distance(current_lat, current_lon, TARGET_LAT, TARGET_LON)
                bearing = calculate_bearing(current_lat, current_lon, TARGET_LAT, TARGET_LON)
                
                # Status g√ºncelle
                status_data.update({
                    'distance_to_target': distance,
                    'bearing_to_target': bearing,
                    'current_lat': current_lat,
                    'current_lon': current_lon,
                    'gps_status': f"ƒ∞Yƒ∞ Fix:{gps_fix_type} Uydu:{satellites_visible}"
                })
                
                # Hedefe vardƒ± mƒ±?
                if distance <= ARRIVAL_RADIUS:
                    command_queue.put(('ARRIVED', None))
                    print(f"üéØ Hedefe varƒ±ldƒ±! Mesafe: {distance:.1f}m")
                    break
                
                # Auto mode'da GPS komutu g√∂nder
                if current_mode == "AUTO_GPS" and not obstacle_detected:
                    # ≈ûu anki heading'i al (compass)
                    current_heading = vehicle.heading if vehicle.heading else 0
                    
                    # Motor komutlarƒ±nƒ± hesapla
                    thr, steer = bearing_to_motor_command(bearing, current_heading)
                    command_queue.put(('GPS_COMMAND', (thr, steer)))
                    
                    print(f"üìç GPS: {distance:.1f}m, bearing: {bearing:.0f}¬∞, heading: {current_heading:.0f}¬∞")
            
            time.sleep(0.5)  # GPS i√ßin daha uzun bekleme
            
        except Exception as e:
            print(f"‚ùå GPS thread hatasƒ±: {e}")
            time.sleep(2)

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Baƒülantƒ± ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
print("‚ñ∂ Pixhawk'a baƒülanƒ±lƒ±yor ‚Ä¶")
try:
    vehicle = connect(CONNECTION, baud=BAUD, wait_ready=False, timeout=CONNECTION_TIMEOUT)
    print("‚ñ∂ Baƒülantƒ± kuruldu, ara√ß hazƒ±rlanƒ±yor...")
    
    # Sistem hazƒ±rlƒ±k
    start_time = time.time()
    while time.time() - start_time < CONNECTION_TIMEOUT:
        try:
            if vehicle.system_status and vehicle.mode:
                print(f"‚ñ∂ Sistem durumu: {vehicle.system_status}")
                print(f"‚ñ∂ Mevcut mod: {vehicle.mode}")
                break
        except Exception as e:
            print(f"‚ñ∂ Bekleniyor... ({int(time.time() - start_time)}s)")
            time.sleep(1)
    
except Exception as e:
    print(f"HATA: Baƒülantƒ± kurulamadƒ± - {e}")
    exit(1)

# Mod ayarla ve arm et
print("‚ñ∂ MANUAL moda ge√ßiliyor...")
vehicle.mode = VehicleMode("MANUAL")

# Arm et
print("‚ñ∂ Ara√ß arm ediliyor...")
arm_attempts = 0
while not vehicle.armed and arm_attempts < 10:
    try:
        vehicle.armed = True
        arm_attempts += 1
        time.sleep(0.5)
    except Exception as e:
        print(f"‚ñ∂ Arm hatasƒ±: {e}")

if vehicle.armed:
    print("ARMED ‚úî")
else:
    print("WARNING: Ara√ß arm edilemedi")

# RC override helper
def send_rc(throttle_pwm: int, steer_pwm: int):
    """Motor komutlarƒ±nƒ± g√∂nder ve debug yap"""
    # PWM deƒüerlerini g√ºvenli aralƒ±kta tut
    throttle_pwm = max(1100, min(1900, int(throttle_pwm)))
    steer_pwm = max(1100, min(1900, int(steer_pwm)))
    
    # Hem CH1 hem CH2'ye steer komutunu g√∂nder (test i√ßin)
    vehicle.channels.overrides = {
        '3': throttle_pwm,   # throttle
        '1': steer_pwm,      # steer CH1
        '2': steer_pwm       # steer CH2 (test)
    }
    print(f"üîß MOTOR KOMUT: CH3={throttle_pwm}, CH1={steer_pwm}, CH2={steer_pwm}")

def stop_all():
    print("‚èπÔ∏è T√úM MOTORLAR DURDURULDU")
    send_rc(PWM_STOP, PWM_STOP)

# Ba≈ülangƒ±√ß dur
stop_all()

# GPS thread'ini ba≈ülat
gps_thread = threading.Thread(target=gps_navigation_thread, args=(vehicle,), daemon=True)
gps_thread.start()

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Kamera ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
cap = cv2.VideoCapture(CAM_INDEX)
if not cap.isOpened():
    raise RuntimeError("Kamera a√ßƒ±lamadƒ±.")

print("‚ñ∂ Sistem hazƒ±r!")
print(f"üéØ Hedef: {TARGET_LAT:.6f}, {TARGET_LON:.6f}")
print("üéÆ Kontroller:")
print("  'g' = GPS moduna ge√ß (hedefe git)")
print("  'm' = Manuel moda ge√ß") 
print("  's' = Dur")
print("  'q' = √áƒ±kƒ±≈ü")

# CLAHE
clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))

try:
    while True:
        # Kamera frame'i oku
        ok, frame = cap.read()
        if not ok:
            continue

        # ROI kƒ±rp
        h, w = frame.shape[:2]
        rw, rh = int(w * 0.6), int(h * 0.6)
        x0 = (w - rw) // 2
        y0 = (h - rh) // 2
        roi = frame[y0:y0+rh, x0:x0+rw].copy()

        # HSV d√∂n√º≈üt√ºr
        roi_blur = cv2.GaussianBlur(roi, (5,5), 0)
        hsv = cv2.cvtColor(roi_blur, cv2.COLOR_BGR2HSV)

        # CLAHE uygula
        h_, s_, v_ = cv2.split(hsv)
        v_eq = clahe.apply(v_)
        hsv = cv2.merge([h_, s_, v_eq])

        # Renk maskeleri
        # Sarƒ± (engel)
        mask_yellow = cv2.inRange(hsv, (18, 140, 80), (38, 255, 255))

        # Ye≈üil (g√ºvenli yol)
        mask_green = cv2.inRange(hsv, (40, 50, 50), (80, 255, 255))

        # Kƒ±rmƒ±zƒ± (g√ºvenli yol)
        red1 = cv2.inRange(hsv, (0, 120, 60), (10, 255, 255))
        red2 = cv2.inRange(hsv, (170, 120, 60), (180, 255, 255))
        mask_red = cv2.bitwise_or(red1, red2)

        # Morfolojik temizlik
        k = np.ones((5,5), np.uint8)
        mask_yellow = cv2.morphologyEx(mask_yellow, cv2.MORPH_OPEN, k, iterations=1)
        mask_green = cv2.morphologyEx(mask_green, cv2.MORPH_OPEN, k, iterations=1)
        mask_red = cv2.morphologyEx(mask_red, cv2.MORPH_OPEN, k, iterations=1)

        # Engel konumu analizi (ROI'yi √º√ß par√ßaya b√∂l)
        roi_width = roi.shape[1]
        left_section = roi[:, 0:roi_width//3]
        center_section = roi[:, roi_width//3:2*roi_width//3]
        right_section = roi[:, 2*roi_width//3:]
        
        # Her b√∂l√ºmdeki sarƒ± piksel oranƒ±
        left_hsv = cv2.cvtColor(left_section, cv2.COLOR_BGR2HSV)
        center_hsv = cv2.cvtColor(center_section, cv2.COLOR_BGR2HSV)
        right_hsv = cv2.cvtColor(right_section, cv2.COLOR_BGR2HSV)
        
        left_yellow = cv2.inRange(left_hsv, (18, 140, 80), (38, 255, 255))
        center_yellow = cv2.inRange(center_hsv, (18, 140, 80), (38, 255, 255))
        right_yellow = cv2.inRange(right_hsv, (18, 140, 80), (38, 255, 255))
        
        left_ratio = np.count_nonzero(left_yellow) / (left_section.shape[0] * left_section.shape[1])
        center_ratio = np.count_nonzero(center_yellow) / (center_section.shape[0] * center_section.shape[1])
        right_ratio = np.count_nonzero(right_yellow) / (right_section.shape[0] * right_section.shape[1])
        
        # Engel konumunu belirle
        obstacle_position = "none"
        max_ratio = max(left_ratio, center_ratio, right_ratio)
        
        if max_ratio > OBSTACLE_THRESHOLD:
            if right_ratio == max_ratio and right_ratio > 0.1:
                obstacle_position = "right"  # Engel saƒüda ‚Üí sola ka√ß
            elif left_ratio == max_ratio and left_ratio > 0.1:
                obstacle_position = "left"   # Engel solda ‚Üí saƒüa ka√ß
            elif center_ratio == max_ratio and center_ratio > 0.1:
                obstacle_position = "center" # Engel ortada ‚Üí sola ka√ß (varsayƒ±lan)
        
        print(f"üéØ Engel konumu: SOL={left_ratio*100:.1f}% ORTA={center_ratio*100:.1f}% SAƒû={right_ratio*100:.1f}% ‚Üí {obstacle_position.upper()}")
        
        status_data['obstacle_ratio'] = max_ratio
        status_data['obstacle_position'] = obstacle_position

        # Engel algƒ±lama (SARI = ENGEL)
        if max_ratio > OBSTACLE_THRESHOLD:
            if not obstacle_detected:
                print(f"üö® ENGEL ALGILANDI! Konum: {obstacle_position.upper()}, Oran: {max_ratio*100:.1f}%")
                obstacle_detected = True
                avoidance_start_time = time.time()
                current_mode = "OBSTACLE_AVOID"
        else:
            if obstacle_detected and time.time() - avoidance_start_time > AVOIDANCE_DURATION:
                print("‚úÖ Engel a≈üƒ±ldƒ±, GPS moduna d√∂n√ºl√ºyor")
                obstacle_detected = False
                current_mode = "AUTO_GPS"

        # Komut i≈üleme
        thr, steer = PWM_STOP, PWM_STOP
        command_executed = False

        # Queue'dan komutlarƒ± i≈üle
        while not command_queue.empty():
            cmd_type, cmd_data = command_queue.get()
            if cmd_type == 'GPS_COMMAND' and current_mode == "AUTO_GPS":
                thr, steer = cmd_data
                command_executed = True
                print(f"‚úÖ GPS KOMUT ƒ∞≈ûLENDƒ∞: THR={thr}, STR={steer}")
            elif cmd_type == 'ARRIVED':
                current_mode = "MANUAL"
                thr, steer = PWM_STOP, PWM_STOP
                command_executed = True
                print("üéØ HEDEFE VARILDI!")

        # Engel ka√ßƒ±nma manevrasƒ±
        if current_mode == "OBSTACLE_AVOID":
            elapsed = time.time() - avoidance_start_time
            if elapsed < AVOIDANCE_DURATION:
                # Engel konumuna g√∂re ka√ßƒ±nma y√∂n√º belirle
                if status_data.get('obstacle_position') == 'right':
                    # Engel saƒüda ‚Üí sola ka√ß (saƒü motor √ßalƒ±≈ütƒ±r, sol motor yava≈ü)
                    thr = PWM_FAST
                    steer = PWM_STOP - 120  # sola steer = saƒü motor hƒ±zlƒ±, sol yava≈ü
                    print(f"üîÑ SOLA KA√áINMA: {elapsed:.1f}/{AVOIDANCE_DURATION}s (engel saƒüda)")
                elif status_data.get('obstacle_position') == 'left':
                    # Engel solda ‚Üí saƒüa ka√ß (sol motor √ßalƒ±≈ütƒ±r, saƒü motor yava≈ü)
                    thr = PWM_FAST
                    steer = PWM_STOP + 120  # saƒüa steer = sol motor hƒ±zlƒ±, saƒü yava≈ü
                    print(f"üîÑ SAƒûA KA√áINMA: {elapsed:.1f}/{AVOIDANCE_DURATION}s (engel solda)")
                else:
                    # Engel ortada veya belirsiz ‚Üí varsayƒ±lan sola ka√ß
                    thr = PWM_FAST
                    steer = PWM_STOP - 120  # sola steer = saƒü motor hƒ±zlƒ±
                    print(f"üîÑ VARSAYILAN SOLA KA√áINMA: {elapsed:.1f}/{AVOIDANCE_DURATION}s")
                command_executed = True

        # Motor komutunu g√∂nder (sadece AUTO modlarda)
        if current_mode != "MANUAL" and command_executed:
            send_rc(thr, steer)
        elif current_mode == "MANUAL":
            # Manuel modda motorlarƒ± durdur
            stop_all()

        # G√∂rsel debug
        if SHOW_WIN:
            # ROI √ßer√ßevesi
            cv2.rectangle(frame, (x0, y0), (x0+rw, y0+rh), (0,255,0), 2)
            
            # ROI b√∂l√ºmlerini g√∂ster (sol, orta, saƒü)
            section_w = rw // 3
            cv2.line(frame, (x0+section_w, y0), (x0+section_w, y0+rh), (255,0,0), 1)  # sol-orta ayƒ±racƒ±
            cv2.line(frame, (x0+2*section_w, y0), (x0+2*section_w, y0+rh), (255,0,0), 1)  # orta-saƒü ayƒ±racƒ±
            
            # B√∂l√ºm etiketleri
            cv2.putText(frame, "SOL", (x0+10, y0+30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,0,0), 1)
            cv2.putText(frame, "ORTA", (x0+section_w+10, y0+30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,0,0), 1)
            cv2.putText(frame, "SAG", (x0+2*section_w+10, y0+30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,0,0), 1)
            
            # Durum bilgileri
            status_color = (0,255,0) if current_mode == "AUTO_GPS" else (0,255,255) if current_mode == "OBSTACLE_AVOID" else (255,255,255)
            
            cv2.putText(frame, f"Mod: {current_mode}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, status_color, 2)
            cv2.putText(frame, f"Hedef: {status_data['distance_to_target']:.1f}m", (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0,255,0), 2)
            cv2.putText(frame, f"Engel: {max_ratio*100:.1f}% ({obstacle_position})", (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0,255,255), 2)
            cv2.putText(frame, f"THR:{thr} STR:{steer}", (10, 120), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255,255,0), 2)

            # Renk maskeleri
            small = 120
            vis = np.zeros((small, small*3, 3), np.uint8)
            
            def put_mask(m, pos, label):
                m3 = cv2.cvtColor(m, cv2.COLOR_GRAY2BGR)
                m3 = cv2.resize(m3, (small, small))
                y, x = pos
                vis[y:y+small, x:x+small] = m3
                cv2.putText(vis, label, (x+5, y+20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,255,255), 1)
            
            # Renk maskeleri + b√∂lgesel analiz
            small = 120
            vis = np.zeros((small*2, small*3, 3), np.uint8)
            
            def put_mask(m, pos, label):
                m3 = cv2.cvtColor(m, cv2.COLOR_GRAY2BGR)
                m3 = cv2.resize(m3, (small, small))
                y, x = pos
                vis[y:y+small, x:x+small] = m3
                cv2.putText(vis, label, (x+5, y+20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,255,255), 1)
            
            # √úst sƒ±ra: Engel b√∂lge analizi
            put_mask(left_yellow, (0, 0), f"SOL {left_ratio*100:.1f}%")
            put_mask(center_yellow, (0, small), f"ORTA {center_ratio*100:.1f}%")
            put_mask(right_yellow, (0, small*2), f"SAƒû {right_ratio*100:.1f}%")
            
            # Alt sƒ±ra: Genel renk maskeleri
            put_mask(mask_yellow, (small, 0), f"SARI {max_ratio*100:.1f}%")
            put_mask(mask_green, (small, small), f"YE≈ûƒ∞L")
            put_mask(mask_red, (small, small*2), f"KIRMIZI")

            # Ana g√∂r√ºnt√º + maskeler
            H = max(frame.shape[0], vis.shape[0])
            W = frame.shape[1] + vis.shape[1] + 10
            canvas = np.zeros((H, W, 3), dtype=np.uint8)
            canvas[:frame.shape[0], :frame.shape[1]] = frame
            canvas[:vis.shape[0], frame.shape[1]+10:frame.shape[1]+10+vis.shape[1]] = vis

            cv2.imshow('GPS Navigation + Obstacle Avoidance', canvas)

        # Klavye kontrolleri
        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'):
            break
        elif key == ord('g'):
            current_mode = "AUTO_GPS"
            obstacle_detected = False
            print("üéØ GPS moduna ge√ßildi - hedefe gidiliyor")
            print(f"üìç Mevcut GPS: {status_data.get('current_lat', 0):.6f}, {status_data.get('current_lon', 0):.6f}")
            print(f"üéØ Hedef GPS: {TARGET_LAT:.6f}, {TARGET_LON:.6f}")
            print(f"üõ∞Ô∏è GPS Durumu: {status_data.get('gps_status', 'Bilinmiyor')}")
        elif key == ord('t'):
            # GPS olmadan test modu
            current_mode = "MANUAL"
            print("üß™ GPS'Sƒ∞Z TEST MODU")
            print("Sim√ºle edilen bearing farkƒ±: -90¬∞ (sola d√∂nmeli)")
            thr, steer = bearing_to_motor_command(270, 0)  # test: batƒ±ya git, kuzeyden
            send_rc(thr, steer)
            print(f"üîß Test komutu g√∂nderildi: THR={thr}, STR={steer}")
        elif key == ord('m'):
            current_mode = "MANUAL"
            obstacle_detected = False
            stop_all()
            print("üéÆ Manuel moda ge√ßildi")
        elif key == ord('s'):
            current_mode = "MANUAL"
            obstacle_detected = False
            stop_all()
            print("‚èπÔ∏è Durduruldu")
        elif key == ord('1'):
            # Test: d√ºz git
            current_mode = "MANUAL"
            send_rc(PWM_FAST, PWM_STOP)
            print("üß™ TEST: D√ºz git")
        elif key == ord('2'):
            # Test: saƒüa d√∂n
            current_mode = "MANUAL"
            send_rc(PWM_FAST, PWM_STOP + 100)
            print("üß™ TEST: Saƒüa d√∂n")
        elif key == ord('3'):
            # Test: sola d√∂n
            current_mode = "MANUAL"
            send_rc(PWM_FAST, PWM_STOP - 100)
            print("üß™ TEST: Sola d√∂n")

        time.sleep(0.03)

except KeyboardInterrupt:
    pass
finally:
    print("\n‚ñ∂ Sistem kapatƒ±lƒ±yor...")
    stop_all()
    vehicle.channels.overrides = {}
    try:
        vehicle.armed = False
    except:
        pass
    vehicle.close()
    cap.release()
    if SHOW_WIN:
        cv2.destroyAllWindows()
    print("‚úÖ GPS navigasyon sistemi sonlandƒ±.")
